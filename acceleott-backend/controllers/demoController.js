import nodemailer from "nodemailer";
import DemoRequest from "../models/DemoRequest.js";

// --- Configure Nodemailer Transporter ---
const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com", // ‚úÖ Explicit host for better reliability
  port: 465,
  secure: true, // true for 465, false for 587
  auth: {
    user: process.env.EMAIL_USER, // e.g., yourcompany@gmail.com
    pass: process.env.EMAIL_PASS, // Gmail App Password (never your normal password)
  },
});

/**
 * üì© Controller: Book Demo Request
 * Handles storing demo requests in MongoDB and sending email notification
 */
export const bookDemo = async (req, res) => {
  try {
    const { name, email, contact, designation } = req.body;

    // --- Validation ---
    if (!name?.trim() || !email?.trim() || !contact?.trim()) {
      return res.status(400).json({
        success: false,
        message: "All required fields (name, email, contact) must be provided.",
      });
    }

    // --- Save Request to Database ---
    const newRequest = await DemoRequest.create({
      name: name.trim(),
      email: email.trim(),
      contact: contact.trim(),
      designation: designation?.trim() || "N/A",
    });

    // --- Compose Email ---
    const mailOptions = {
      from: `"AIMMED Demo" <${process.env.EMAIL_FROM || process.env.EMAIL_USER}>`,
      to: process.env.ADMIN_EMAIL || process.env.EMAIL_USER,
      subject: `üß† New AIMMED Demo Request from ${name}`,
      html: `
        <div style="font-family:Arial, sans-serif; color:#333; line-height:1.5;">
          <h2 style="color:#007BFF;">New Demo Request Received</h2>
          <p><strong>Name:</strong> ${name}</p>
          <p><strong>Email:</strong> ${email}</p>
          <p><strong>Contact:</strong> ${contact}</p>
          <p><strong>Designation:</strong> ${designation || "N/A"}</p>
          <p><strong>Requested At:</strong> ${new Date().toLocaleString()}</p>
          <hr>
          <p style="font-size:12px; color:#777;">
            This email was automatically generated by AIMMED CRM.
          </p>
        </div>
      `,
    };

    // --- Send Email ---
    await transporter.sendMail(mailOptions);

    // --- Success Response ---
    return res.status(200).json({
      success: true,
      message: "‚úÖ Demo request submitted successfully! We'll contact you soon.",
      data: newRequest,
    });
  } catch (err) {
    console.error("‚ùå Error in bookDemo:", err);

    // --- Error Response ---
    return res.status(500).json({
      success: false,
      message: "Internal Server Error. Please try again later.",
    });
  }
};
