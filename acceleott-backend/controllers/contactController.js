import nodemailer from "nodemailer";

/**
 * Create a reusable, verified transporter once at module load
 * to avoid re-initializing for every request (important for serverless).
 */
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
  tls: {
    rejectUnauthorized: true, // enforce valid certificates
  },
});

// Verify transporter once on startup
transporter.verify((error, success) => {
  if (error) {
    console.error("❌ Email transporter not ready:", error.message);
  } else {
    console.log("📨 Email transporter verified and ready to send messages.");
  }
});

/**
 * Simple HTML wrapper for incoming contact messages.
 */
function buildContactEmail({ name, email, message }) {
  return `
    <div style="font-family:Inter,Arial,sans-serif;color:#0f172a">
      <h2>📬 New Contact Message</h2>
      <p>You’ve received a new message from the contact form:</p>
      <ul style="line-height:1.6">
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>Email:</strong> <a href="mailto:${email}">${email}</a></li>
      </ul>
      <p style="margin-top:16px"><strong>Message:</strong></p>
      <blockquote style="border-left:4px solid #0ea5a5;padding-left:12px;margin:8px 0;color:#334155;">
        ${message.replace(/\n/g, "<br>")}
      </blockquote>
      <hr style="border:none;border-top:1px solid #e5e7eb;margin:24px 0">
      <small>This email was automatically generated by the Acceleott website contact form.</small>
    </div>
  `;
}

/**
 * Send contact message endpoint
 */
export const sendMessage = async (req, res) => {
  try {
    const { name, email, message } = req.body;

    // Basic input validation
    if (!name || !email || !message) {
      return res.status(400).json({ message: "Name, email, and message are required." });
    }

    // Prevent header injection
    if (/\r|\n/.test(email)) {
      return res.status(400).json({ message: "Invalid email address." });
    }

    // Compose email
    const mailOptions = {
      from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
      to: process.env.CONTACT_RECEIVER || process.env.ADMIN_EMAIL || process.env.EMAIL_USER,
      subject: `📩 New Contact Form Submission from ${name}`,
      text: `
        New contact form submission:
        Name: ${name}
        Email: ${email}
        Message: ${message}
      `,
      html: buildContactEmail({ name, email, message }),
      replyTo: email, // lets you reply directly to the sender
    };

    await transporter.sendMail(mailOptions);

    console.log(`✅ Contact message sent successfully from ${email}`);

    return res.status(200).json({
      success: true,
      message: "Message sent successfully. We'll get back to you soon!",
    });
  } catch (err) {
    console.error("❌ sendMessage error:", err.message);

    // Graceful fallback response
    return res.status(500).json({
      success: false,
      message: "Failed to send message. Please try again later.",
    });
  }
};
